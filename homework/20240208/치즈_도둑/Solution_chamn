import java.awt.Point;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
 
public class Solution {
    static int N, max, cnt, check;
    static int[][] arr;
    static boolean[][] visit, tmp;
    static Queue<Point> q;
    static int[][] dxy = {{-1,0},{0,1},{1,0},{0,-1}};
 
    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer tk;
        int T = Integer.parseInt(br.readLine());
        for (int tc = 1; tc <= T; tc++) {
            check = 0;
            max = Integer.MIN_VALUE;
            N = Integer.parseInt(br.readLine());
            arr = new int[N][N];
            visit = new boolean[N][N];
            for (int i = 0; i < N; i++) {
                tk = new StringTokenizer(br.readLine());
                for (int j = 0; j < N; j++) {
                    arr[i][j] = Integer.parseInt(tk.nextToken());
                }
            }
            loop: 
            for (int i = 1; i <= 100; i++) {
                cnt = 0;
                for (int a = 0; a < N; a++) {
                    for (int b = 0; b < N; b++) {
                        if (arr[a][b] == i) {
                            visit[a][b] = true;
                            check++;
                        }
                    }
                }
                tmp = new boolean[N][N];
                for (int c = 0; c < N; c++) {
                    tmp[c] = visit[c].clone();
                }
                for (int a = 0; a < N; a++) {
                    for (int b = 0; b < N; b++) {
                        if (!tmp[a][b]) {
                            q = new LinkedList<>();
                            q.add(new Point(a, b));
                            bfs();
                            cnt++;
                        }
                    }
                }
                if (cnt > max)
                    max = cnt;
                if (check == N * N)
                    break loop;
            }
            if (max == 0)
                max = 1;
            System.out.println("#" + tc + " " + max);
        }
    }
 
    private static void bfs() {
        while (!q.isEmpty()) {
            Point c = q.poll();
            for (int d = 0; d < 4; d++) {
                int nx = c.x + dxy[d][0];
                int ny = c.y + dxy[d][1];
                if (nx >= 0 && nx < N && ny >= 0 && ny < N && !tmp[nx][ny]) {
                	q.add(new Point(nx, ny));
                    tmp[nx][ny] = true;
                }
                    
            }
        }
    }
 
}
 
